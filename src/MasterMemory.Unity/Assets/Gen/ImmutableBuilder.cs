// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Tests.TestStructures;
using MasterMemory.Tests;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Text;
using System;
using UnityEngine;
using TestTable.Tables;

namespace TestTable
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<Fail> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FailTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveFail(int[] keys)
        {
            var data = RemoveCore(memory.FailTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FailTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(Fail[] addOrReplaceData)
        {
            var data = DiffCore(memory.FailTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FailTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<ItemMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                table,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveItemMaster(int[] keys)
        {
            var data = RemoveCore(memory.ItemMasterTable.GetRawDataUnsafe(), keys, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                table,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(ItemMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.ItemMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                table,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<ItemMasterEmptyValidate> data)
        {
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                table,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveItemMasterEmptyValidate(int[] keys)
        {
            var data = RemoveCore(memory.ItemMasterEmptyValidateTable.GetRawDataUnsafe(), keys, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                table,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(ItemMasterEmptyValidate[] addOrReplaceData)
        {
            var data = DiffCore(memory.ItemMasterEmptyValidateTable.GetRawDataUnsafe(), addOrReplaceData, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                table,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<PersonModel> data)
        {
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                table,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemovePersonModel(string[] keys)
        {
            var data = RemoveCore(memory.PersonModelTable.GetRawDataUnsafe(), keys, x => x.RandomId, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                table,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(PersonModel[] addOrReplaceData)
        {
            var data = DiffCore(memory.PersonModelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.RandomId, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                table,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<QuestMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                table,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveQuestMaster(int[] keys)
        {
            var data = RemoveCore(memory.QuestMasterTable.GetRawDataUnsafe(), keys, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                table,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(QuestMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.QuestMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                table,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<QuestMasterEmptyValidate> data)
        {
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                table,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveQuestMasterEmptyValidate(int[] keys)
        {
            var data = RemoveCore(memory.QuestMasterEmptyValidateTable.GetRawDataUnsafe(), keys, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                table,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(QuestMasterEmptyValidate[] addOrReplaceData)
        {
            var data = DiffCore(memory.QuestMasterEmptyValidateTable.GetRawDataUnsafe(), addOrReplaceData, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                table,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<Sample> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SampleTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                table,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveSample(int[] keys)
        {
            var data = RemoveCore(memory.SampleTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SampleTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                table,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(Sample[] addOrReplaceData)
        {
            var data = DiffCore(memory.SampleTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SampleTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                table,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SequentialCheckMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SequentialCheckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                table,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveSequentialCheckMaster(int[] keys)
        {
            var data = RemoveCore(memory.SequentialCheckMasterTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SequentialCheckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                table,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(SequentialCheckMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.SequentialCheckMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SequentialCheckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                table,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SingleMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SingleMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                table,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveSingleMaster(int[] keys)
        {
            var data = RemoveCore(memory.SingleMasterTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SingleMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                table,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(SingleMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.SingleMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SingleMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                table,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SkillMaster> data)
        {
            var newData = CloneAndSortBy(data, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default);
            var table = new SkillMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                table,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveSkillMaster((int SkillId, int SkillLevel)[] keys)
        {
            var data = RemoveCore(memory.SkillMasterTable.GetRawDataUnsafe(), keys, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default);
            var newData = CloneAndSortBy(data, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default);
            var table = new SkillMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                table,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(SkillMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.SkillMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default);
            var newData = CloneAndSortBy(data, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default);
            var table = new SkillMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                table,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<StaticLanguage_zh_cn> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new StaticLanguage_zh_cnTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                table,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveStaticLanguage_zh_cn(long[] keys)
        {
            var data = RemoveCore(memory.StaticLanguage_zh_cnTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new StaticLanguage_zh_cnTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                table,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(StaticLanguage_zh_cn[] addOrReplaceData)
        {
            var data = DiffCore(memory.StaticLanguage_zh_cnTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new StaticLanguage_zh_cnTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                table,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<TestMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.TestID, System.Collections.Generic.Comparer<int>.Default);
            var table = new TestMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                table,
                memory.UnityModelTable,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }


        public void ReplaceAll(System.Collections.Generic.IList<UnityModel> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new UnityModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                table,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveUnityModel(int[] keys)
        {
            var data = RemoveCore(memory.UnityModelTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new UnityModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                table,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(UnityModel[] addOrReplaceData)
        {
            var data = DiffCore(memory.UnityModelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new UnityModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                table,
                memory.UserLevelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<UserLevel> data)
        {
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                table,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveUserLevel(int[] keys)
        {
            var data = RemoveCore(memory.UserLevelTable.GetRawDataUnsafe(), keys, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                table,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(UserLevel[] addOrReplaceData)
        {
            var data = DiffCore(memory.UserLevelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                table,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<World_map_spawn> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new World_map_spawnTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                table
            
            );
        }

        public void RemoveWorld_map_spawn(long[] keys)
        {
            var data = RemoveCore(memory.World_map_spawnTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new World_map_spawnTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                table
            
            );
        }

        public void Diff(World_map_spawn[] addOrReplaceData)
        {
            var data = DiffCore(memory.World_map_spawnTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new World_map_spawnTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.StaticLanguage_zh_cnTable,
                memory.TestMasterTable,
                memory.UnityModelTable,
                memory.UserLevelTable,
                table
            
            );
        }

    }
}