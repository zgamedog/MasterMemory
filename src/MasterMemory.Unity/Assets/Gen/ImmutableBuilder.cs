// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Tests.TestStructures;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Text;
using System;
using UnityEngine;
using TestTable.Tables;

namespace TestTable
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<PersonModel> data)
        {
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.StaticLanguage_zh_cnTable,
                memory.UnityModelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemovePersonModel(string[] keys)
        {
            var data = RemoveCore(memory.PersonModelTable.GetRawDataUnsafe(), keys, x => x.RandomId, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.StaticLanguage_zh_cnTable,
                memory.UnityModelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(PersonModel[] addOrReplaceData)
        {
            var data = DiffCore(memory.PersonModelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.RandomId, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.StaticLanguage_zh_cnTable,
                memory.UnityModelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<StaticLanguage_zh_cn> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new StaticLanguage_zh_cnTable(newData);
            memory = new MemoryDatabase(
                memory.PersonModelTable,
                table,
                memory.UnityModelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveStaticLanguage_zh_cn(long[] keys)
        {
            var data = RemoveCore(memory.StaticLanguage_zh_cnTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new StaticLanguage_zh_cnTable(newData);
            memory = new MemoryDatabase(
                memory.PersonModelTable,
                table,
                memory.UnityModelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(StaticLanguage_zh_cn[] addOrReplaceData)
        {
            var data = DiffCore(memory.StaticLanguage_zh_cnTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new StaticLanguage_zh_cnTable(newData);
            memory = new MemoryDatabase(
                memory.PersonModelTable,
                table,
                memory.UnityModelTable,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<UnityModel> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new UnityModelTable(newData);
            memory = new MemoryDatabase(
                memory.PersonModelTable,
                memory.StaticLanguage_zh_cnTable,
                table,
                memory.World_map_spawnTable
            
            );
        }

        public void RemoveUnityModel(int[] keys)
        {
            var data = RemoveCore(memory.UnityModelTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new UnityModelTable(newData);
            memory = new MemoryDatabase(
                memory.PersonModelTable,
                memory.StaticLanguage_zh_cnTable,
                table,
                memory.World_map_spawnTable
            
            );
        }

        public void Diff(UnityModel[] addOrReplaceData)
        {
            var data = DiffCore(memory.UnityModelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new UnityModelTable(newData);
            memory = new MemoryDatabase(
                memory.PersonModelTable,
                memory.StaticLanguage_zh_cnTable,
                table,
                memory.World_map_spawnTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<World_map_spawn> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new World_map_spawnTable(newData);
            memory = new MemoryDatabase(
                memory.PersonModelTable,
                memory.StaticLanguage_zh_cnTable,
                memory.UnityModelTable,
                table
            
            );
        }

        public void RemoveWorld_map_spawn(long[] keys)
        {
            var data = RemoveCore(memory.World_map_spawnTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new World_map_spawnTable(newData);
            memory = new MemoryDatabase(
                memory.PersonModelTable,
                memory.StaticLanguage_zh_cnTable,
                memory.UnityModelTable,
                table
            
            );
        }

        public void Diff(World_map_spawn[] addOrReplaceData)
        {
            var data = DiffCore(memory.World_map_spawnTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<long>.Default);
            var table = new World_map_spawnTable(newData);
            memory = new MemoryDatabase(
                memory.PersonModelTable,
                memory.StaticLanguage_zh_cnTable,
                memory.UnityModelTable,
                table
            
            );
        }

    }
}