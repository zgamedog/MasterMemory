// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Tests.TestStructures;
using MasterMemory.Tests;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Text;
using System;
using UnityEngine;
using TestTable.Tables;

namespace TestTable
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public FailTable FailTable { get; private set; }
        public ItemMasterTable ItemMasterTable { get; private set; }
        public ItemMasterEmptyValidateTable ItemMasterEmptyValidateTable { get; private set; }
        public PersonModelTable PersonModelTable { get; private set; }
        public QuestMasterTable QuestMasterTable { get; private set; }
        public QuestMasterEmptyValidateTable QuestMasterEmptyValidateTable { get; private set; }
        public SampleTable SampleTable { get; private set; }
        public SequentialCheckMasterTable SequentialCheckMasterTable { get; private set; }
        public SingleMasterTable SingleMasterTable { get; private set; }
        public SkillMasterTable SkillMasterTable { get; private set; }
        public StaticLanguage_zh_cnTable StaticLanguage_zh_cnTable { get; private set; }
        public TestMasterTable TestMasterTable { get; private set; }
        public UnityModelTable UnityModelTable { get; private set; }
        public UserLevelTable UserLevelTable { get; private set; }
        public World_map_spawnTable World_map_spawnTable { get; private set; }

        public MemoryDatabase(
            FailTable FailTable,
            ItemMasterTable ItemMasterTable,
            ItemMasterEmptyValidateTable ItemMasterEmptyValidateTable,
            PersonModelTable PersonModelTable,
            QuestMasterTable QuestMasterTable,
            QuestMasterEmptyValidateTable QuestMasterEmptyValidateTable,
            SampleTable SampleTable,
            SequentialCheckMasterTable SequentialCheckMasterTable,
            SingleMasterTable SingleMasterTable,
            SkillMasterTable SkillMasterTable,
            StaticLanguage_zh_cnTable StaticLanguage_zh_cnTable,
            TestMasterTable TestMasterTable,
            UnityModelTable UnityModelTable,
            UserLevelTable UserLevelTable,
            World_map_spawnTable World_map_spawnTable
        )
        {
            this.FailTable = FailTable;
            this.ItemMasterTable = ItemMasterTable;
            this.ItemMasterEmptyValidateTable = ItemMasterEmptyValidateTable;
            this.PersonModelTable = PersonModelTable;
            this.QuestMasterTable = QuestMasterTable;
            this.QuestMasterEmptyValidateTable = QuestMasterEmptyValidateTable;
            this.SampleTable = SampleTable;
            this.SequentialCheckMasterTable = SequentialCheckMasterTable;
            this.SingleMasterTable = SingleMasterTable;
            this.SkillMasterTable = SkillMasterTable;
            this.StaticLanguage_zh_cnTable = StaticLanguage_zh_cnTable;
            this.TestMasterTable = TestMasterTable;
            this.UnityModelTable = UnityModelTable;
            this.UserLevelTable = UserLevelTable;
            this.World_map_spawnTable = World_map_spawnTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.FailTable = ExtractTableData<Fail, FailTable>(header, databaseBinary, options, xs => new FailTable(xs));
            this.ItemMasterTable = ExtractTableData<ItemMaster, ItemMasterTable>(header, databaseBinary, options, xs => new ItemMasterTable(xs));
            this.ItemMasterEmptyValidateTable = ExtractTableData<ItemMasterEmptyValidate, ItemMasterEmptyValidateTable>(header, databaseBinary, options, xs => new ItemMasterEmptyValidateTable(xs));
            this.PersonModelTable = ExtractTableData<PersonModel, PersonModelTable>(header, databaseBinary, options, xs => new PersonModelTable(xs));
            this.QuestMasterTable = ExtractTableData<QuestMaster, QuestMasterTable>(header, databaseBinary, options, xs => new QuestMasterTable(xs));
            this.QuestMasterEmptyValidateTable = ExtractTableData<QuestMasterEmptyValidate, QuestMasterEmptyValidateTable>(header, databaseBinary, options, xs => new QuestMasterEmptyValidateTable(xs));
            this.SampleTable = ExtractTableData<Sample, SampleTable>(header, databaseBinary, options, xs => new SampleTable(xs));
            this.SequentialCheckMasterTable = ExtractTableData<SequentialCheckMaster, SequentialCheckMasterTable>(header, databaseBinary, options, xs => new SequentialCheckMasterTable(xs));
            this.SingleMasterTable = ExtractTableData<SingleMaster, SingleMasterTable>(header, databaseBinary, options, xs => new SingleMasterTable(xs));
            this.SkillMasterTable = ExtractTableData<SkillMaster, SkillMasterTable>(header, databaseBinary, options, xs => new SkillMasterTable(xs));
            this.StaticLanguage_zh_cnTable = ExtractTableData<StaticLanguage_zh_cn, StaticLanguage_zh_cnTable>(header, databaseBinary, options, xs => new StaticLanguage_zh_cnTable(xs));
            this.TestMasterTable = ExtractTableData<TestMaster, TestMasterTable>(header, databaseBinary, options, xs => new TestMasterTable(xs));
            this.UnityModelTable = ExtractTableData<UnityModel, UnityModelTable>(header, databaseBinary, options, xs => new UnityModelTable(xs));
            this.UserLevelTable = ExtractTableData<UserLevel, UserLevelTable>(header, databaseBinary, options, xs => new UserLevelTable(xs));
            this.World_map_spawnTable = ExtractTableData<World_map_spawn, World_map_spawnTable>(header, databaseBinary, options, xs => new World_map_spawnTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.FailTable = ExtractTableData<Fail, FailTable>(header, databaseBinary, options, xs => new FailTable(xs)),
                () => this.ItemMasterTable = ExtractTableData<ItemMaster, ItemMasterTable>(header, databaseBinary, options, xs => new ItemMasterTable(xs)),
                () => this.ItemMasterEmptyValidateTable = ExtractTableData<ItemMasterEmptyValidate, ItemMasterEmptyValidateTable>(header, databaseBinary, options, xs => new ItemMasterEmptyValidateTable(xs)),
                () => this.PersonModelTable = ExtractTableData<PersonModel, PersonModelTable>(header, databaseBinary, options, xs => new PersonModelTable(xs)),
                () => this.QuestMasterTable = ExtractTableData<QuestMaster, QuestMasterTable>(header, databaseBinary, options, xs => new QuestMasterTable(xs)),
                () => this.QuestMasterEmptyValidateTable = ExtractTableData<QuestMasterEmptyValidate, QuestMasterEmptyValidateTable>(header, databaseBinary, options, xs => new QuestMasterEmptyValidateTable(xs)),
                () => this.SampleTable = ExtractTableData<Sample, SampleTable>(header, databaseBinary, options, xs => new SampleTable(xs)),
                () => this.SequentialCheckMasterTable = ExtractTableData<SequentialCheckMaster, SequentialCheckMasterTable>(header, databaseBinary, options, xs => new SequentialCheckMasterTable(xs)),
                () => this.SingleMasterTable = ExtractTableData<SingleMaster, SingleMasterTable>(header, databaseBinary, options, xs => new SingleMasterTable(xs)),
                () => this.SkillMasterTable = ExtractTableData<SkillMaster, SkillMasterTable>(header, databaseBinary, options, xs => new SkillMasterTable(xs)),
                () => this.StaticLanguage_zh_cnTable = ExtractTableData<StaticLanguage_zh_cn, StaticLanguage_zh_cnTable>(header, databaseBinary, options, xs => new StaticLanguage_zh_cnTable(xs)),
                () => this.TestMasterTable = ExtractTableData<TestMaster, TestMasterTable>(header, databaseBinary, options, xs => new TestMasterTable(xs)),
                () => this.UnityModelTable = ExtractTableData<UnityModel, UnityModelTable>(header, databaseBinary, options, xs => new UnityModelTable(xs)),
                () => this.UserLevelTable = ExtractTableData<UserLevel, UserLevelTable>(header, databaseBinary, options, xs => new UserLevelTable(xs)),
                () => this.World_map_spawnTable = ExtractTableData<World_map_spawn, World_map_spawnTable>(header, databaseBinary, options, xs => new World_map_spawnTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.FailTable.GetRawDataUnsafe());
            builder.Append(this.ItemMasterTable.GetRawDataUnsafe());
            builder.Append(this.ItemMasterEmptyValidateTable.GetRawDataUnsafe());
            builder.Append(this.PersonModelTable.GetRawDataUnsafe());
            builder.Append(this.QuestMasterTable.GetRawDataUnsafe());
            builder.Append(this.QuestMasterEmptyValidateTable.GetRawDataUnsafe());
            builder.Append(this.SampleTable.GetRawDataUnsafe());
            builder.Append(this.SequentialCheckMasterTable.GetRawDataUnsafe());
            builder.Append(this.SingleMasterTable.GetRawDataUnsafe());
            builder.Append(this.SkillMasterTable.GetRawDataUnsafe());
            builder.Append(this.StaticLanguage_zh_cnTable.GetRawDataUnsafe());
            builder.Append(this.TestMasterTable.GetRawDataUnsafe());
            builder.Append(this.UnityModelTable.GetRawDataUnsafe());
            builder.Append(this.UserLevelTable.GetRawDataUnsafe());
            builder.Append(this.World_map_spawnTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.FailTable.GetRawDataUnsafe());
            builder.Append(this.ItemMasterTable.GetRawDataUnsafe());
            builder.Append(this.ItemMasterEmptyValidateTable.GetRawDataUnsafe());
            builder.Append(this.PersonModelTable.GetRawDataUnsafe());
            builder.Append(this.QuestMasterTable.GetRawDataUnsafe());
            builder.Append(this.QuestMasterEmptyValidateTable.GetRawDataUnsafe());
            builder.Append(this.SampleTable.GetRawDataUnsafe());
            builder.Append(this.SequentialCheckMasterTable.GetRawDataUnsafe());
            builder.Append(this.SingleMasterTable.GetRawDataUnsafe());
            builder.Append(this.SkillMasterTable.GetRawDataUnsafe());
            builder.Append(this.StaticLanguage_zh_cnTable.GetRawDataUnsafe());
            builder.Append(this.TestMasterTable.GetRawDataUnsafe());
            builder.Append(this.UnityModelTable.GetRawDataUnsafe());
            builder.Append(this.UserLevelTable.GetRawDataUnsafe());
            builder.Append(this.World_map_spawnTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                FailTable,
                ItemMasterTable,
                ItemMasterEmptyValidateTable,
                PersonModelTable,
                QuestMasterTable,
                QuestMasterEmptyValidateTable,
                SampleTable,
                SequentialCheckMasterTable,
                SingleMasterTable,
                SkillMasterTable,
                StaticLanguage_zh_cnTable,
                TestMasterTable,
                UnityModelTable,
                UserLevelTable,
                World_map_spawnTable,
            });

            ((ITableUniqueValidate)FailTable).ValidateUnique(result);
            ValidateTable(FailTable.All, database, "Id", FailTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ItemMasterTable).ValidateUnique(result);
            ValidateTable(ItemMasterTable.All, database, "ItemId", ItemMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ItemMasterEmptyValidateTable).ValidateUnique(result);
            ValidateTable(ItemMasterEmptyValidateTable.All, database, "ItemId", ItemMasterEmptyValidateTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)PersonModelTable).ValidateUnique(result);
            ValidateTable(PersonModelTable.All, database, "RandomId", PersonModelTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)QuestMasterTable).ValidateUnique(result);
            ValidateTable(QuestMasterTable.All, database, "QuestId", QuestMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)QuestMasterEmptyValidateTable).ValidateUnique(result);
            ValidateTable(QuestMasterEmptyValidateTable.All, database, "QuestId", QuestMasterEmptyValidateTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SampleTable).ValidateUnique(result);
            ValidateTable(SampleTable.All, database, "Id", SampleTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SequentialCheckMasterTable).ValidateUnique(result);
            ValidateTable(SequentialCheckMasterTable.All, database, "Id", SequentialCheckMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SingleMasterTable).ValidateUnique(result);
            ValidateTable(SingleMasterTable.All, database, "Id", SingleMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SkillMasterTable).ValidateUnique(result);
            ValidateTable(SkillMasterTable.All, database, "(SkillId, SkillLevel)", SkillMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)StaticLanguage_zh_cnTable).ValidateUnique(result);
            ValidateTable(StaticLanguage_zh_cnTable.All, database, "Id", StaticLanguage_zh_cnTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)TestMasterTable).ValidateUnique(result);
            ValidateTable(TestMasterTable.All, database, "TestID", TestMasterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)UnityModelTable).ValidateUnique(result);
            ValidateTable(UnityModelTable.All, database, "Id", UnityModelTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)UserLevelTable).ValidateUnique(result);
            ValidateTable(UserLevelTable.All, database, "Level", UserLevelTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)World_map_spawnTable).ValidateUnique(result);
            ValidateTable(World_map_spawnTable.All, database, "Id", World_map_spawnTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "fail":
                    return db.FailTable;
                case "item_master":
                    return db.ItemMasterTable;
                case "item_master_empty":
                    return db.ItemMasterEmptyValidateTable;
                case "people":
                    return db.PersonModelTable;
                case "quest_master":
                    return db.QuestMasterTable;
                case "quest_master_empty":
                    return db.QuestMasterEmptyValidateTable;
                case "s_a_m_p_l_e":
                    return db.SampleTable;
                case "sequantial_master":
                    return db.SequentialCheckMasterTable;
                case "single_master":
                    return db.SingleMasterTable;
                case "skillmaster":
                    return db.SkillMasterTable;
                case "staticLanguage_zh_cn":
                    return db.StaticLanguage_zh_cnTable;
                case "TestMaster":
                    return db.TestMasterTable;
                case "unity":
                    return db.UnityModelTable;
                case "UserLevel":
                    return db.UserLevelTable;
                case "world_map_spawn":
                    return db.World_map_spawnTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("fail", TestTable.Tables.FailTable.CreateMetaTable());
            dict.Add("item_master", TestTable.Tables.ItemMasterTable.CreateMetaTable());
            dict.Add("item_master_empty", TestTable.Tables.ItemMasterEmptyValidateTable.CreateMetaTable());
            dict.Add("people", TestTable.Tables.PersonModelTable.CreateMetaTable());
            dict.Add("quest_master", TestTable.Tables.QuestMasterTable.CreateMetaTable());
            dict.Add("quest_master_empty", TestTable.Tables.QuestMasterEmptyValidateTable.CreateMetaTable());
            dict.Add("s_a_m_p_l_e", TestTable.Tables.SampleTable.CreateMetaTable());
            dict.Add("sequantial_master", TestTable.Tables.SequentialCheckMasterTable.CreateMetaTable());
            dict.Add("single_master", TestTable.Tables.SingleMasterTable.CreateMetaTable());
            dict.Add("skillmaster", TestTable.Tables.SkillMasterTable.CreateMetaTable());
            dict.Add("staticLanguage_zh_cn", TestTable.Tables.StaticLanguage_zh_cnTable.CreateMetaTable());
            dict.Add("TestMaster", TestTable.Tables.TestMasterTable.CreateMetaTable());
            dict.Add("unity", TestTable.Tables.UnityModelTable.CreateMetaTable());
            dict.Add("UserLevel", TestTable.Tables.UserLevelTable.CreateMetaTable());
            dict.Add("world_map_spawn", TestTable.Tables.World_map_spawnTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}