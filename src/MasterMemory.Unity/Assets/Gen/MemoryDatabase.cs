// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Tests.TestStructures;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Text;
using System;
using UnityEngine;
using TestTable.Tables;

namespace TestTable
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public PersonModelTable PersonModelTable { get; private set; }
        public StaticLanguage_zh_cnTable StaticLanguage_zh_cnTable { get; private set; }
        public UnityModelTable UnityModelTable { get; private set; }
        public World_map_spawnTable World_map_spawnTable { get; private set; }

        public MemoryDatabase(
            PersonModelTable PersonModelTable,
            StaticLanguage_zh_cnTable StaticLanguage_zh_cnTable,
            UnityModelTable UnityModelTable,
            World_map_spawnTable World_map_spawnTable
        )
        {
            this.PersonModelTable = PersonModelTable;
            this.StaticLanguage_zh_cnTable = StaticLanguage_zh_cnTable;
            this.UnityModelTable = UnityModelTable;
            this.World_map_spawnTable = World_map_spawnTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.PersonModelTable = ExtractTableData<PersonModel, PersonModelTable>(header, databaseBinary, options, xs => new PersonModelTable(xs));
            this.StaticLanguage_zh_cnTable = ExtractTableData<StaticLanguage_zh_cn, StaticLanguage_zh_cnTable>(header, databaseBinary, options, xs => new StaticLanguage_zh_cnTable(xs));
            this.UnityModelTable = ExtractTableData<UnityModel, UnityModelTable>(header, databaseBinary, options, xs => new UnityModelTable(xs));
            this.World_map_spawnTable = ExtractTableData<World_map_spawn, World_map_spawnTable>(header, databaseBinary, options, xs => new World_map_spawnTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.PersonModelTable = ExtractTableData<PersonModel, PersonModelTable>(header, databaseBinary, options, xs => new PersonModelTable(xs)),
                () => this.StaticLanguage_zh_cnTable = ExtractTableData<StaticLanguage_zh_cn, StaticLanguage_zh_cnTable>(header, databaseBinary, options, xs => new StaticLanguage_zh_cnTable(xs)),
                () => this.UnityModelTable = ExtractTableData<UnityModel, UnityModelTable>(header, databaseBinary, options, xs => new UnityModelTable(xs)),
                () => this.World_map_spawnTable = ExtractTableData<World_map_spawn, World_map_spawnTable>(header, databaseBinary, options, xs => new World_map_spawnTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.PersonModelTable.GetRawDataUnsafe());
            builder.Append(this.StaticLanguage_zh_cnTable.GetRawDataUnsafe());
            builder.Append(this.UnityModelTable.GetRawDataUnsafe());
            builder.Append(this.World_map_spawnTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.PersonModelTable.GetRawDataUnsafe());
            builder.Append(this.StaticLanguage_zh_cnTable.GetRawDataUnsafe());
            builder.Append(this.UnityModelTable.GetRawDataUnsafe());
            builder.Append(this.World_map_spawnTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                PersonModelTable,
                StaticLanguage_zh_cnTable,
                UnityModelTable,
                World_map_spawnTable,
            });

            ((ITableUniqueValidate)PersonModelTable).ValidateUnique(result);
            ValidateTable(PersonModelTable.All, database, "RandomId", PersonModelTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)StaticLanguage_zh_cnTable).ValidateUnique(result);
            ValidateTable(StaticLanguage_zh_cnTable.All, database, "Id", StaticLanguage_zh_cnTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)UnityModelTable).ValidateUnique(result);
            ValidateTable(UnityModelTable.All, database, "Id", UnityModelTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)World_map_spawnTable).ValidateUnique(result);
            ValidateTable(World_map_spawnTable.All, database, "Id", World_map_spawnTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "people":
                    return db.PersonModelTable;
                case "staticLanguage_zh_cn":
                    return db.StaticLanguage_zh_cnTable;
                case "unity":
                    return db.UnityModelTable;
                case "world_map_spawn":
                    return db.World_map_spawnTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("people", TestTable.Tables.PersonModelTable.CreateMetaTable());
            dict.Add("staticLanguage_zh_cn", TestTable.Tables.StaticLanguage_zh_cnTable.CreateMetaTable());
            dict.Add("unity", TestTable.Tables.UnityModelTable.CreateMetaTable());
            dict.Add("world_map_spawn", TestTable.Tables.World_map_spawnTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}